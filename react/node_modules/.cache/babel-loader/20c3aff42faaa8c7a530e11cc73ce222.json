{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sumanth\\\\OneDrive\\\\Documents\\\\react\\\\patient_monitor\\\\src\\\\components\\\\pattable.js\";\nimport React from 'react';\nimport MaterialTable from 'material-table';\nexport function PatTable() {\n  const [state, setState] = React.useState({\n    columns: [{\n      title: 'Name',\n      field: 'name'\n    }, {\n      title: 'Unique ID',\n      field: 'id'\n    }],\n    data: [{\n      name: 'Mehmet',\n      id: 307\n    }, {\n      name: 'Zerya ',\n      id: 891\n    }, {\n      name: 'Kumar',\n      id: 644\n    }, {\n      name: 'Kovind19',\n      id: 6969\n    }]\n  });\n  return /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Registered Doctors\",\n    columns: state.columns,\n    data: state.data,\n    options: {\n      paging: false\n    },\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        resolve();\n        const data = state.data;\n        data.push(newData);\n        setState(...state, {\n          data: newData\n        });\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            console.log(\"oldData: \", oldData);\n            setState(prevState => {\n              const data = [...prevState.data];\n              console.log(\"new data: \", newData);\n              data[data.indexOf(oldData)] = newData;\n              return { ...prevState,\n                data\n              };\n            });\n            console.log(\"state : \", state);\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(oldData), 1);\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Sumanth/OneDrive/Documents/react/patient_monitor/src/components/pattable.js"],"names":["React","MaterialTable","PatTable","state","setState","useState","columns","title","field","data","name","id","paging","onRowAdd","newData","Promise","resolve","push","onRowUpdate","oldData","setTimeout","console","log","prevState","indexOf","onRowDelete","splice"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport MaterialTable from 'material-table';\r\n\r\nexport  function PatTable() {\r\n  const [state, setState] = React.useState({\r\n    columns: [\r\n      { title: 'Name', field: 'name' },\r\n      { title: 'Unique ID', field: 'id' },\r\n    ],\r\n    data: [\r\n      { name: 'Mehmet', id: 307 },\r\n      { name: 'Zerya ',id:891},\r\n      { name: 'Kumar',id:644},\r\n      { name: 'Kovind19',id:6969}\r\n    ],\r\n  });\r\n\r\n  return (\r\n    <MaterialTable\r\n      title=\"Registered Doctors\"\r\n      columns={state.columns}\r\n      data={state.data}\r\n      options={{\r\n          paging:false\r\n      }}\r\n      editable={{\r\n         onRowAdd: (newData) =>\r\n          new Promise((resolve) => {\r\n            resolve();\r\n            const data = state.data;\r\n            data.push(newData);\r\n            setState(...state,{\r\n              data:newData\r\n            })\r\n          }),\r\n        onRowUpdate: (newData, oldData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              if (oldData) {\r\n                  console.log(\"oldData: \",oldData)\r\n                setState((prevState) => {\r\n                  const data = [...prevState.data];\r\n                  console.log(\"new data: \",newData)\r\n                  data[data.indexOf(oldData)] = newData;\r\n                  return { ...prevState, data };\r\n                  \r\n                });\r\n                console.log(\"state : \",state)\r\n              }\r\n            }, 600);\r\n          }),\r\n        onRowDelete: (oldData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              setState((prevState) => {\r\n                const data = [...prevState.data];\r\n                data.splice(data.indexOf(oldData), 1);\r\n                return { ...prevState, data };\r\n              });\r\n            }, 600);\r\n          }),\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}