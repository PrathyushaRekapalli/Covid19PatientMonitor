{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sumanth\\\\OneDrive\\\\Documents\\\\react\\\\patient_monitor\\\\src\\\\components\\\\pattable.js\";\nimport React from 'react';\nimport MaterialTable from 'material-table';\nimport { PatTableExtract } from './listextractor';\nexport function PatTable() {\n  let [name_list, id_list] = PatTableExtract();\n\n  let create_object = () => {\n    return {\n      name: null,\n      id: null\n    };\n  }; //try to make a func which would return {name:null,id:null} and make this return happen as many times as there are names in the name list\n\n\n  let data_fn = (name_list, id_list) => {\n    let data = [];\n\n    for (let j = 0; j < name_list.length; j++) data[j] = create_object(); // data[0].name=n.forEach((p)=>p)\n\n\n    for (let j = 0; j < name_list.length; j++) {\n      data[j].name = name_list[j];\n      data[j].id = id_list[j];\n    }\n\n    return data;\n  };\n\n  let [state, setState] = React.useState({\n    columns: [{\n      title: 'Name',\n      field: 'name'\n    }, {\n      title: 'Unique ID',\n      field: 'id'\n    }],\n    data: data_fn(name_list, id_list),\n    push: {\n      name: null,\n      id: null\n    }\n  }); // let [state, setState] = React.useState({\n  //   columns: [\n  //     { title: 'Name', field: 'name' },\n  //     { title: 'Unique ID', field: 'id' },\n  //   ],\n  //   data: [\n  //     { name: 'Mehmet', id: 307 },\n  //     { name: 'Zerya ',id:891},\n  //     { name: 'Kumar',id:644},\n  //     { name: 'Kovind19',id:6969}\n  //   ],\n  // });\n\n  let push_data = () => {\n    return state.push;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Registered Doctors\",\n    columns: state.columns,\n    data: state.data,\n    options: {\n      paging: false\n    },\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.push(newData); //console.log(newData);\n\n            state.push = state.data;\n            state.push.push(newData); //do api request to send state.push\n\n            let x = push_data();\n            console.log(x); // console.log(state.push)\n\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            console.log(\"oldData: \", oldData);\n            setState(prevState => {\n              const data = [...prevState.data];\n              state.push = newData;\n              console.log(\"new data: \", state.data);\n              data[data.indexOf(oldData)] = newData;\n              return { ...prevState,\n                data\n              };\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(oldData), 1);\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/Sumanth/OneDrive/Documents/react/patient_monitor/src/components/pattable.js"],"names":["React","MaterialTable","PatTableExtract","PatTable","name_list","id_list","create_object","name","id","data_fn","data","j","length","state","setState","useState","columns","title","field","push","push_data","paging","onRowAdd","newData","Promise","resolve","setTimeout","prevState","x","console","log","onRowUpdate","oldData","indexOf","onRowDelete","splice"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport {PatTableExtract} from './listextractor'\r\n\r\nexport  function PatTable() {\r\n  let [name_list,id_list]=PatTableExtract();\r\n  let create_object=()=>{\r\n    return {name:null,id:null}\r\n  }\r\n//try to make a func which would return {name:null,id:null} and make this return happen as many times as there are names in the name list\r\n  let data_fn = (name_list,id_list) => {\r\n    let data=[];\r\n    for(let j=0;j<name_list.length;j++)\r\n      data[j]=create_object()\r\n    // data[0].name=n.forEach((p)=>p)\r\n    for(let j=0;j<name_list.length;j++){\r\n      data[j].name=name_list[j]\r\n      data[j].id=id_list[j]\r\n    }\r\n    return data\r\n  }\r\n  let [state, setState] = React.useState({\r\n    columns: [\r\n      { title: 'Name', field: 'name' },\r\n      { title: 'Unique ID', field: 'id' },\r\n    ],\r\n    data: data_fn(name_list,id_list),\r\n    push:{name:null,id:null}\r\n  });\r\n\r\n  // let [state, setState] = React.useState({\r\n  //   columns: [\r\n  //     { title: 'Name', field: 'name' },\r\n  //     { title: 'Unique ID', field: 'id' },\r\n  //   ],\r\n  //   data: [\r\n  //     { name: 'Mehmet', id: 307 },\r\n  //     { name: 'Zerya ',id:891},\r\n  //     { name: 'Kumar',id:644},\r\n  //     { name: 'Kovind19',id:6969}\r\n  //   ],\r\n  // });\r\n  \r\n  let push_data=() =>{\r\n    return state.push\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n    <MaterialTable\r\n      title=\"Registered Doctors\"\r\n      columns={state.columns}\r\n      data={state.data}\r\n      options={{\r\n          paging:false\r\n      }}\r\n      editable={{\r\n        onRowAdd: (newData) =>\r\n        new Promise((resolve) => {\r\n          setTimeout(() => {\r\n            resolve();\r\n            setState((prevState) => {\r\n              const data = [...prevState.data];\r\n              data.push(newData);\r\n              //console.log(newData);\r\n              state.push=state.data\r\n              state.push.push(newData)\r\n              //do api request to send state.push\r\n              let x=push_data()\r\n              console.log(x)\r\n              // console.log(state.push)\r\n              return { ...prevState, data };\r\n            });\r\n          }, 600);\r\n\r\n        }),\r\n        onRowUpdate: (newData, oldData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              if (oldData) {\r\n                  console.log(\"oldData: \",oldData)\r\n                setState((prevState) => {\r\n                  const data = [...prevState.data];\r\n                  state.push=newData\r\n                  console.log(\"new data: \",state.data)\r\n                  data[data.indexOf(oldData)] = newData;\r\n                  return { ...prevState, data };\r\n                });\r\n              }\r\n            }, 600);\r\n          }),\r\n        onRowDelete: (oldData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              setState((prevState) => {\r\n                const data = [...prevState.data];\r\n                data.splice(data.indexOf(oldData), 1);\r\n                return { ...prevState, data };\r\n              });\r\n            }, 600);\r\n          }),\r\n      }}\r\n    />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}