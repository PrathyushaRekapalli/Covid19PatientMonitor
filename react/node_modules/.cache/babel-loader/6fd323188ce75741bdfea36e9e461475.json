{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sumanth\\\\OneDrive\\\\Documents\\\\react\\\\patient_monitor\\\\src\\\\components\\\\pattable.js\";\nimport React from \"react\";\nimport MaterialTable from \"material-table\";\nimport { PatTableExtract } from \"./listextractor\";\nimport axios from \"axios\";\nexport function PatTable() {\n  const getData = () => {\n    axios.get(\"http://dceed99d2fec.ngrok.io/covid19_patient_monitor/get_info\", {\n      params: {\n        a_id: \"ADMIN123\"\n      }\n    }).then(res => {\n      console.log(\"api response \", res.data.patients);\n      setapiData(res.data.patients);\n      console.log(\"state= \", apiData);\n    }).catch(err => console.log(\"error \", err));\n  };\n\n  let [name_list, id_list] = PatTableExtract();\n\n  let create_object = () => {\n    return {\n      name: null,\n      id: null\n    };\n  }; //try to make a func which would return {name:null,id:null} and make this return happen as many times as there are names in the name list\n\n\n  let data_fn = (name_list, id_list) => {\n    let data = [];\n\n    for (let j = 0; j < name_list.length; j++) data[j] = create_object(); // data[0].name=n.forEach((p)=>p)\n\n\n    for (let j = 0; j < name_list.length; j++) {\n      data[j].name = name_list[j];\n      data[j].id = id_list[j];\n    }\n\n    return data;\n  };\n\n  const [apiData, setapiData] = useState([]);\n  let [state, setState] = React.useState({\n    columns: [{\n      title: \"Name\",\n      field: \"name\"\n    }, {\n      title: \"Patient ID\",\n      field: \"id\"\n    } // { title: 'Email', field: 'email' },\n    // { title: 'Password', field: 'password' },\n    // { title: 'Address', field: 'address' },\n    // { title: 'Phone Number', field: 'phone' },\n    // { title: 'Gender', field: 'sex' },\n    // { title: 'Name of Guardian', field: 'guardianName' },\n    // { title: 'Age', field: 'age' },\n    // { title: 'Height', field: 'height' },\n    // { title: 'Weight', field: 'weight' },\n    // { title: 'Doctor ID', field: 'doctorid' }\n    ],\n    data: data_fn(name_list, id_list),\n    push: {\n      name: null,\n      id: null\n    }\n  });\n\n  const get_data = push => {\n    let s = []; //console.log(\"push =\",push)\n\n    for (let j = 0; j < name_list.length + 1; j++) s[j] = create_object();\n\n    for (let j = 0; j < name_list.length + 1; j++) {\n      s[j].name = push[j].name;\n      s[j].id = push[j].id;\n    } //console.log(q)\n\n\n    return s;\n  };\n\n  const get_data2 = push => {\n    let s = []; //console.log(\"push =\",push)\n\n    for (let j = 0; j < name_list.length; j++) s[j] = create_object();\n\n    for (let j = 0; j < name_list.length; j++) {\n      s[j].name = push[j].name;\n      s[j].id = push[j].id;\n    } //console.log(q)\n\n\n    return s;\n  };\n\n  const get_data3 = push => {\n    let s = []; //console.log(\"push =\",push)\n\n    for (let j = 0; j < name_list.length - 1; j++) s[j] = create_object();\n\n    for (let j = 0; j < name_list.length - 1; j++) {\n      s[j].name = push[j].name;\n      s[j].id = push[j].id;\n    } //console.log(q)\n\n\n    return s;\n  }; // let [state, setState] = React.useState({\n  //   columns: [\n  //     { title: 'Name', field: 'name' },\n  //     { title: 'Unique ID', field: 'id' },\n  //   ],\n  //   data: [\n  //     { name: 'Mehmet', id: 307 },\n  //     { name: 'Zerya ',id:891},\n  //     { name: 'Kumar',id:644},\n  //     { name: 'Kovind19',id:6969}\n  //   ],\n  // });\n\n\n  getData();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Registered Patients\",\n    columns: state.columns,\n    data: state.data,\n    options: {\n      paging: false\n    },\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.push(newData);\n            state.push = data;\n            let s = get_data(state.push); //object to be pushed with api\n\n            console.log(JSON.stringify(s)); // do api request to send state.push below\n            // axios.post('',JSON.stringify(s))\n            // .then((response)=> console.log(response))\n            // .catch((err)=>console.log(err))\n\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            console.log(\"oldData: \", oldData);\n            setState(prevState => {\n              const data = [...prevState.data];\n              state.push = state.data; // console.log(state.push)\n              // console.log(\"new data: \",newData)\n\n              state.push[data.length - 1] = newData;\n              let s = get_data2(state.push); //object to be pushed\n              //do api request to send state.push below\n\n              data[data.indexOf(oldData)] = newData;\n              return { ...prevState,\n                data\n              };\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(oldData), 1);\n            console.log(\"data \", data);\n            state.push = data;\n            let s = get_data3(state.push); //object to pushed\n            //do api request\n            // console.log(\"s= \",s)\n\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/Sumanth/OneDrive/Documents/react/patient_monitor/src/components/pattable.js"],"names":["React","MaterialTable","PatTableExtract","axios","PatTable","getData","get","params","a_id","then","res","console","log","data","patients","setapiData","apiData","catch","err","name_list","id_list","create_object","name","id","data_fn","j","length","useState","state","setState","columns","title","field","push","get_data","s","get_data2","get_data3","paging","onRowAdd","newData","Promise","resolve","setTimeout","prevState","JSON","stringify","onRowUpdate","oldData","indexOf","onRowDelete","splice"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { PatTableExtract } from \"./listextractor\";\r\nimport axios from \"axios\";\r\n\r\nexport function PatTable() {\r\n  const getData = () => {\r\n    axios\r\n      .get(\"http://dceed99d2fec.ngrok.io/covid19_patient_monitor/get_info\", {\r\n        params: {\r\n          a_id: \"ADMIN123\",\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(\"api response \", res.data.patients);\r\n        setapiData(res.data.patients);\r\n        console.log(\"state= \", apiData);\r\n      })\r\n      .catch((err) => console.log(\"error \", err));\r\n  };\r\n\r\n  let [name_list, id_list] = PatTableExtract();\r\n  let create_object = () => {\r\n    return { name: null, id: null };\r\n  };\r\n  //try to make a func which would return {name:null,id:null} and make this return happen as many times as there are names in the name list\r\n  let data_fn = (name_list, id_list) => {\r\n    let data = [];\r\n    for (let j = 0; j < name_list.length; j++) data[j] = create_object();\r\n    // data[0].name=n.forEach((p)=>p)\r\n    for (let j = 0; j < name_list.length; j++) {\r\n      data[j].name = name_list[j];\r\n      data[j].id = id_list[j];\r\n    }\r\n    return data;\r\n  };\r\n  const [apiData, setapiData] = useState([]);\r\n  let [state, setState] = React.useState({\r\n    columns: [\r\n      { title: \"Name\", field: \"name\" },\r\n      { title: \"Patient ID\", field: \"id\" },\r\n      // { title: 'Email', field: 'email' },\r\n      // { title: 'Password', field: 'password' },\r\n      // { title: 'Address', field: 'address' },\r\n      // { title: 'Phone Number', field: 'phone' },\r\n      // { title: 'Gender', field: 'sex' },\r\n      // { title: 'Name of Guardian', field: 'guardianName' },\r\n      // { title: 'Age', field: 'age' },\r\n      // { title: 'Height', field: 'height' },\r\n      // { title: 'Weight', field: 'weight' },\r\n      // { title: 'Doctor ID', field: 'doctorid' }\r\n    ],\r\n    data: data_fn(name_list, id_list),\r\n    push: { name: null, id: null },\r\n  });\r\n\r\n  const get_data = (push) => {\r\n    let s = [];\r\n    //console.log(\"push =\",push)\r\n    for (let j = 0; j < name_list.length + 1; j++) s[j] = create_object();\r\n    for (let j = 0; j < name_list.length + 1; j++) {\r\n      s[j].name = push[j].name;\r\n      s[j].id = push[j].id;\r\n    }\r\n    //console.log(q)\r\n    return s;\r\n  };\r\n  const get_data2 = (push) => {\r\n    let s = [];\r\n    //console.log(\"push =\",push)\r\n    for (let j = 0; j < name_list.length; j++) s[j] = create_object();\r\n    for (let j = 0; j < name_list.length; j++) {\r\n      s[j].name = push[j].name;\r\n      s[j].id = push[j].id;\r\n    }\r\n    //console.log(q)\r\n    return s;\r\n  };\r\n  const get_data3 = (push) => {\r\n    let s = [];\r\n    //console.log(\"push =\",push)\r\n    for (let j = 0; j < name_list.length - 1; j++) s[j] = create_object();\r\n    for (let j = 0; j < name_list.length - 1; j++) {\r\n      s[j].name = push[j].name;\r\n      s[j].id = push[j].id;\r\n    }\r\n    //console.log(q)\r\n    return s;\r\n  };\r\n  // let [state, setState] = React.useState({\r\n  //   columns: [\r\n  //     { title: 'Name', field: 'name' },\r\n  //     { title: 'Unique ID', field: 'id' },\r\n  //   ],\r\n  //   data: [\r\n  //     { name: 'Mehmet', id: 307 },\r\n  //     { name: 'Zerya ',id:891},\r\n  //     { name: 'Kumar',id:644},\r\n  //     { name: 'Kovind19',id:6969}\r\n  //   ],\r\n  // });\r\n  getData();\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        title=\"Registered Patients\"\r\n        columns={state.columns}\r\n        data={state.data}\r\n        options={{\r\n          paging: false,\r\n        }}\r\n        editable={{\r\n          onRowAdd: (newData) =>\r\n            new Promise((resolve) => {\r\n              setTimeout(() => {\r\n                resolve();\r\n                setState((prevState) => {\r\n                  const data = [...prevState.data];\r\n                  data.push(newData);\r\n                  state.push = data;\r\n                  let s = get_data(state.push); //object to be pushed with api\r\n                  console.log(JSON.stringify(s));\r\n                  // do api request to send state.push below\r\n                  // axios.post('',JSON.stringify(s))\r\n                  // .then((response)=> console.log(response))\r\n                  // .catch((err)=>console.log(err))\r\n                  return { ...prevState, data };\r\n                });\r\n              }, 600);\r\n            }),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve) => {\r\n              setTimeout(() => {\r\n                resolve();\r\n                if (oldData) {\r\n                  console.log(\"oldData: \", oldData);\r\n                  setState((prevState) => {\r\n                    const data = [...prevState.data];\r\n                    state.push = state.data;\r\n                    // console.log(state.push)\r\n                    // console.log(\"new data: \",newData)\r\n                    state.push[data.length - 1] = newData;\r\n                    let s = get_data2(state.push); //object to be pushed\r\n                    //do api request to send state.push below\r\n                    data[data.indexOf(oldData)] = newData;\r\n                    return { ...prevState, data };\r\n                  });\r\n                }\r\n              }, 600);\r\n            }),\r\n          onRowDelete: (oldData) =>\r\n            new Promise((resolve) => {\r\n              setTimeout(() => {\r\n                resolve();\r\n                setState((prevState) => {\r\n                  const data = [...prevState.data];\r\n                  data.splice(data.indexOf(oldData), 1);\r\n                  console.log(\"data \", data);\r\n                  state.push = data;\r\n                  let s = get_data3(state.push); //object to pushed\r\n                  //do api request\r\n                  // console.log(\"s= \",s)\r\n                  return { ...prevState, data };\r\n                });\r\n              }, 600);\r\n            }),\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}