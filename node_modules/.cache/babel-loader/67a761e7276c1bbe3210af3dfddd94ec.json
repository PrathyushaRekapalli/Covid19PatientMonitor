{"ast":null,"code":"export function Extract(name) {\n  console.log(\"inisde list ectractor method\");\n  let name_list = [],\n      id_list = [],\n      i = 0;\n  List.forEach(p => {\n    if (p.name === name) {\n      name_list = p.patients.map(e => e[0]);\n      id_list = p.patients.map(e => e[1]);\n    }\n  });\n  console.log(name_list, id_list);\n  return [name_list, id_list];\n}\nexport function PatTableExtract() {\n  let name_list = [],\n      id_list = [],\n      i = 0;\n  List.forEach(p => {\n    name_list = p.patients.map(e => e[0]);\n    id_list = p.patients.map(e => e[1]);\n  });\n  console.log(name_list);\n  return [name_list, id_list];\n}\nexport function doctableExtract() {\n  let name_list = [],\n      id_list = [],\n      i = 0;\n  List.forEach(p => {\n    name_list.push(p.name);\n    console.log(\"added \", name_list);\n    id_list.push(p.d_id);\n  }); //console.log(name_list)\n\n  return [name_list, id_list];\n}","map":{"version":3,"sources":["C:/Users/Sumanth/OneDrive/Documents/react/patient_monitor/src/components/listextractor.js"],"names":["Extract","name","console","log","name_list","id_list","i","List","forEach","p","patients","map","e","PatTableExtract","doctableExtract","push","d_id"],"mappings":"AAAA,OAAO,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,MAAIC,SAAS,GAAG,EAAhB;AAAA,MACEC,OAAO,GAAG,EADZ;AAAA,MAEEC,CAAC,GAAG,CAFN;AAGAC,EAAAA,IAAI,CAACC,OAAL,CAAcC,CAAD,IAAO;AAClB,QAAIA,CAAC,CAACR,IAAF,KAAWA,IAAf,EAAqB;AACnBG,MAAAA,SAAS,GAAGK,CAAC,CAACC,QAAF,CAAWC,GAAX,CAAgBC,CAAD,IAAOA,CAAC,CAAC,CAAD,CAAvB,CAAZ;AACAP,MAAAA,OAAO,GAAGI,CAAC,CAACC,QAAF,CAAWC,GAAX,CAAgBC,CAAD,IAAOA,CAAC,CAAC,CAAD,CAAvB,CAAV;AACD;AACF,GALD;AAMAV,EAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ,EAAuBC,OAAvB;AACA,SAAO,CAACD,SAAD,EAAYC,OAAZ,CAAP;AACD;AAED,OAAO,SAASQ,eAAT,GAA2B;AAChC,MAAIT,SAAS,GAAG,EAAhB;AAAA,MACEC,OAAO,GAAG,EADZ;AAAA,MAEEC,CAAC,GAAG,CAFN;AAGAC,EAAAA,IAAI,CAACC,OAAL,CAAcC,CAAD,IAAO;AAClBL,IAAAA,SAAS,GAAGK,CAAC,CAACC,QAAF,CAAWC,GAAX,CAAgBC,CAAD,IAAOA,CAAC,CAAC,CAAD,CAAvB,CAAZ;AACAP,IAAAA,OAAO,GAAGI,CAAC,CAACC,QAAF,CAAWC,GAAX,CAAgBC,CAAD,IAAOA,CAAC,CAAC,CAAD,CAAvB,CAAV;AACD,GAHD;AAIAV,EAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ;AACA,SAAO,CAACA,SAAD,EAAYC,OAAZ,CAAP;AACD;AAED,OAAO,SAASS,eAAT,GAA2B;AAChC,MAAIV,SAAS,GAAG,EAAhB;AAAA,MACEC,OAAO,GAAG,EADZ;AAAA,MAEEC,CAAC,GAAG,CAFN;AAGAC,EAAAA,IAAI,CAACC,OAAL,CAAcC,CAAD,IAAO;AAClBL,IAAAA,SAAS,CAACW,IAAV,CAAeN,CAAC,CAACR,IAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBC,SAAtB;AACAC,IAAAA,OAAO,CAACU,IAAR,CAAaN,CAAC,CAACO,IAAf;AACD,GAJD,EAJgC,CAShC;;AACA,SAAO,CAACZ,SAAD,EAAYC,OAAZ,CAAP;AACD","sourcesContent":["export function Extract(name) {\r\n  console.log(\"inisde list ectractor method\");\r\n  let name_list = [],\r\n    id_list = [],\r\n    i = 0;\r\n  List.forEach((p) => {\r\n    if (p.name === name) {\r\n      name_list = p.patients.map((e) => e[0]);\r\n      id_list = p.patients.map((e) => e[1]);\r\n    }\r\n  });\r\n  console.log(name_list, id_list);\r\n  return [name_list, id_list];\r\n}\r\n\r\nexport function PatTableExtract() {\r\n  let name_list = [],\r\n    id_list = [],\r\n    i = 0;\r\n  List.forEach((p) => {\r\n    name_list = p.patients.map((e) => e[0]);\r\n    id_list = p.patients.map((e) => e[1]);\r\n  });\r\n  console.log(name_list);\r\n  return [name_list, id_list];\r\n}\r\n\r\nexport function doctableExtract() {\r\n  let name_list = [],\r\n    id_list = [],\r\n    i = 0;\r\n  List.forEach((p) => {\r\n    name_list.push(p.name);\r\n    console.log(\"added \", name_list);\r\n    id_list.push(p.d_id);\r\n  });\r\n  //console.log(name_list)\r\n  return [name_list, id_list];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}