{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sumanth\\\\OneDrive\\\\Documents\\\\react\\\\patient_monitor\\\\src\\\\components\\\\pattable.js\";\nimport React from 'react';\nimport MaterialTable from 'material-table';\nexport function PatTable() {\n  const [state, setState] = React.useState({\n    columns: [{\n      title: 'Name',\n      field: 'name'\n    }, {\n      title: 'Unique ID',\n      field: 'id'\n    }],\n    data: [{\n      name: 'Mehmet',\n      id: 307\n    }, {\n      name: 'Zerya ',\n      id: 891\n    }, {\n      name: 'Kumar',\n      id: 644\n    }, {\n      name: 'Kovind19',\n      id: 6969\n    }]\n  });\n  return /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Registered Doctors\",\n    columns: state.columns,\n    data: state.data,\n    options: {\n      paging: false\n    },\n    editable: {\n      /*         onRowAdd: (newData) =>\r\n                new Promise((resolve) => {\r\n                  setTimeout(() => {\r\n                    resolve();\r\n                    setState((prevState) => {\r\n                      const data = [...prevState.data];\r\n                      data.push(newData);\r\n                      return { ...prevState, data };\r\n                    });\r\n                  }, 600);\r\n                }), */\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            console.log(\"oldData: \", oldData);\n            setState(prevState => {\n              const data = [...prevState.data];\n              console.log(\"new data: \", newData);\n              data[data.indexOf(oldData)] = newData;\n              console.log(state);\n              return { ...prevState,\n                data\n              };\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(oldData), 1);\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Sumanth/OneDrive/Documents/react/patient_monitor/src/components/pattable.js"],"names":["React","MaterialTable","PatTable","state","setState","useState","columns","title","field","data","name","id","paging","onRowUpdate","newData","oldData","Promise","resolve","setTimeout","console","log","prevState","indexOf","onRowDelete","splice"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AAEA,OAAQ,SAASC,QAAT,GAAoB;AAC1B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,KAAK,CAACK,QAAN,CAAe;AACvCC,IAAAA,OAAO,EAAE,CACP;AAAEC,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,KAAK,EAAE;AAAxB,KADO,EAEP;AAAED,MAAAA,KAAK,EAAE,WAAT;AAAsBC,MAAAA,KAAK,EAAE;AAA7B,KAFO,CAD8B;AAKvCC,IAAAA,IAAI,EAAE,CACJ;AAAEC,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,EAAE,EAAE;AAAtB,KADI,EAEJ;AAAED,MAAAA,IAAI,EAAE,QAAR;AAAiBC,MAAAA,EAAE,EAAC;AAApB,KAFI,EAGJ;AAAED,MAAAA,IAAI,EAAE,OAAR;AAAgBC,MAAAA,EAAE,EAAC;AAAnB,KAHI,EAIJ;AAAED,MAAAA,IAAI,EAAE,UAAR;AAAmBC,MAAAA,EAAE,EAAC;AAAtB,KAJI;AALiC,GAAf,CAA1B;AAaA,sBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAC,oBADR;AAEE,IAAA,OAAO,EAAER,KAAK,CAACG,OAFjB;AAGE,IAAA,IAAI,EAAEH,KAAK,CAACM,IAHd;AAIE,IAAA,OAAO,EAAE;AACLG,MAAAA,MAAM,EAAC;AADF,KAJX;AAOE,IAAA,QAAQ,EAAE;AAChB;;;;;;;;;;;AAWQC,MAAAA,WAAW,EAAE,CAACC,OAAD,EAAUC,OAAV,KACX,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACvBC,QAAAA,UAAU,CAAC,MAAM;AACfD,UAAAA,OAAO;;AACP,cAAIF,OAAJ,EAAa;AACTI,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBL,OAAxB;AACFX,YAAAA,QAAQ,CAAEiB,SAAD,IAAe;AACtB,oBAAMZ,IAAI,GAAG,CAAC,GAAGY,SAAS,CAACZ,IAAd,CAAb;AACAU,cAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBN,OAAzB;AACAL,cAAAA,IAAI,CAACA,IAAI,CAACa,OAAL,CAAaP,OAAb,CAAD,CAAJ,GAA8BD,OAA9B;AACAK,cAAAA,OAAO,CAACC,GAAR,CAAYjB,KAAZ;AACA,qBAAO,EAAE,GAAGkB,SAAL;AAAgBZ,gBAAAA;AAAhB,eAAP;AAED,aAPO,CAAR;AAQD;AACF,SAbS,EAaP,GAbO,CAAV;AAcD,OAfD,CAbM;AA6BRc,MAAAA,WAAW,EAAGR,OAAD,IACX,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACvBC,QAAAA,UAAU,CAAC,MAAM;AACfD,UAAAA,OAAO;AACPb,UAAAA,QAAQ,CAAEiB,SAAD,IAAe;AACtB,kBAAMZ,IAAI,GAAG,CAAC,GAAGY,SAAS,CAACZ,IAAd,CAAb;AACAA,YAAAA,IAAI,CAACe,MAAL,CAAYf,IAAI,CAACa,OAAL,CAAaP,OAAb,CAAZ,EAAmC,CAAnC;AACA,mBAAO,EAAE,GAAGM,SAAL;AAAgBZ,cAAAA;AAAhB,aAAP;AACD,WAJO,CAAR;AAKD,SAPS,EAOP,GAPO,CAAV;AAQD,OATD;AA9BM,KAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAmDD","sourcesContent":["import React from 'react';\r\nimport MaterialTable from 'material-table';\r\n\r\nexport  function PatTable() {\r\n  const [state, setState] = React.useState({\r\n    columns: [\r\n      { title: 'Name', field: 'name' },\r\n      { title: 'Unique ID', field: 'id' },\r\n    ],\r\n    data: [\r\n      { name: 'Mehmet', id: 307 },\r\n      { name: 'Zerya ',id:891},\r\n      { name: 'Kumar',id:644},\r\n      { name: 'Kovind19',id:6969}\r\n    ],\r\n  });\r\n\r\n  return (\r\n    <MaterialTable\r\n      title=\"Registered Doctors\"\r\n      columns={state.columns}\r\n      data={state.data}\r\n      options={{\r\n          paging:false\r\n      }}\r\n      editable={{\r\n/*         onRowAdd: (newData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              setState((prevState) => {\r\n                const data = [...prevState.data];\r\n                data.push(newData);\r\n                return { ...prevState, data };\r\n              });\r\n            }, 600);\r\n          }), */\r\n        onRowUpdate: (newData, oldData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              if (oldData) {\r\n                  console.log(\"oldData: \",oldData)\r\n                setState((prevState) => {\r\n                  const data = [...prevState.data];\r\n                  console.log(\"new data: \",newData)\r\n                  data[data.indexOf(oldData)] = newData;\r\n                  console.log(state)\r\n                  return { ...prevState, data };\r\n                  \r\n                });\r\n              }\r\n            }, 600);\r\n          }),\r\n        onRowDelete: (oldData) =>\r\n          new Promise((resolve) => {\r\n            setTimeout(() => {\r\n              resolve();\r\n              setState((prevState) => {\r\n                const data = [...prevState.data];\r\n                data.splice(data.indexOf(oldData), 1);\r\n                return { ...prevState, data };\r\n              });\r\n            }, 600);\r\n          }),\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}