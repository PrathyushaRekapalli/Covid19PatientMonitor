{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sumanth\\\\OneDrive\\\\Documents\\\\react\\\\patient_monitor\\\\src\\\\components\\\\pattable.js\";\nimport React, { useState, useEffect } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { PatTableExtract } from \"./listextractor\";\nimport axios from \"axios\";\nimport { Extract } from \"./extract.js\";\nexport function PatTable() {\n  //set state for apidata\n  const [apiData, setapiData] = useState([]);\n  const [datalen, setdataLen] = useState(0); //request data from api\n\n  async function getApiData() {\n    await axios.get(\"http://7f528d0c0908.ngrok.io/covid19_patient_monitor/get_info\", {\n      params: {\n        a_id: \"ADMIN123\"\n      }\n    }).then(res => {\n      // console.log(\"api response \", res.data.patients);\n      setapiData(res.data.patients); //console.log(\"state= \", apiData);\n    }).catch(err => console.log(\"error \", err));\n  }\n\n  let create_object = () => {\n    return {\n      name: 0,\n      address: 0,\n      patientId: 0,\n      phone: 0,\n      guardianName: 0,\n      doctorId: 0,\n      sex: 0,\n      weight: 0,\n      height: 0,\n      age: 0,\n      email: 0\n    };\n  };\n\n  function table_data() {\n    //await getApiData();\n    // let len = apiData;\n    getApiData();\n    let Details = apiData;\n    console.log(\"api obj details \", apiData); // console.log(\"detaiks name \", apiData[1].name);\n\n    for (var key in Details) console.log(\"details[k]= \", Details[key]);\n\n    let d = [];\n\n    for (let j = 0; j < 7; j++) d[j] = create_object(); //console.log(\"table data: \", d);\n    // console.log(\"d name \", d[0].name);\n    // for (let j = 0; j < 7; j++) {\n    //   d[j].name = Details[j].name;\n    //   d[j].address = Details[j].address;\n    //   d[j].patientId = Details[j].patientId;\n    //   d[j].phone = Details[j].phone;\n    //   d[j].guardianName = Details[j].guardianName;\n    //   d[j].doctorId = Details[j].doctorId;\n    //   d[j].sex = Details[j].sex;\n    //   d[j].weight = Details[j].weight;\n    //   d[j].height = Details[j].height;\n    //   d[j].age = Details[j].age;\n    // }\n    //console.log(\"table data: \", d);\n\n\n    return d;\n  }\n\n  let d = table_data(); // console.log(\"table data: \", d);\n\n  let [name_list, id_list] = PatTableExtract(); //try to make a func which would return {name:null,id:null} and make this return happen as many times as there are names in the name list\n\n  let data_fn = (name_list, id_list) => {\n    let data = [];\n\n    for (let j = 0; j < name_list.length; j++) data[j] = create_object(); // data[0].name=n.forEach((p)=>p)\n\n\n    for (let j = 0; j < name_list.length; j++) {\n      data[j].name = name_list[j];\n      data[j].id = id_list[j];\n    }\n\n    return data;\n  }; //console.log(\"apidata= \", apiData);\n\n\n  let [state, setState] = React.useState({\n    columns: [{\n      title: \"Name\",\n      field: \"name\"\n    }, {\n      title: \"Patient ID\",\n      field: \"id\"\n    }, {\n      title: \"Email\",\n      field: \"email\"\n    }, {\n      title: \"Password\",\n      field: \"password\"\n    }, {\n      title: \"Address\",\n      field: \"address\"\n    }, {\n      title: \"Phone Number\",\n      field: \"phone\"\n    }, {\n      title: \"Gender\",\n      field: \"sex\"\n    }, {\n      title: \"Name of Guardian\",\n      field: \"guardianName\"\n    }, {\n      title: \"Age\",\n      field: \"age\"\n    }, {\n      title: \"Height\",\n      field: \"height\"\n    }, {\n      title: \"Weight\",\n      field: \"weight\"\n    }, {\n      title: \"Doctor ID\",\n      field: \"doctorid\"\n    }],\n    // data: data_fn(name_list, id_list),\n    data: [],\n    push: {\n      name: null,\n      id: null\n    }\n  });\n\n  const get_data = push => {\n    let s = []; //console.log(\"push =\",push)\n\n    for (let j = 0; j < name_list.length + 1; j++) s[j] = create_object();\n\n    for (let j = 0; j < name_list.length + 1; j++) {\n      s[j].name = push[j].name;\n      s[j].id = push[j].id;\n    } //console.log(q)\n\n\n    return s;\n  };\n\n  const get_data2 = push => {\n    let s = []; //console.log(\"push =\",push)\n\n    for (let j = 0; j < name_list.length; j++) s[j] = create_object();\n\n    for (let j = 0; j < name_list.length; j++) {\n      s[j].name = push[j].name;\n      s[j].id = push[j].id;\n    } //console.log(q)\n\n\n    return s;\n  };\n\n  const get_data3 = push => {\n    let s = []; //console.log(\"push =\",push)\n\n    for (let j = 0; j < name_list.length - 1; j++) s[j] = create_object();\n\n    for (let j = 0; j < name_list.length - 1; j++) {\n      s[j].name = push[j].name;\n      s[j].id = push[j].id;\n    } //console.log(q)\n\n\n    return s;\n  }; // let [state, setState] = React.useState({\n  //   columns: [\n  //     { title: 'Name', field: 'name' },\n  //     { title: 'Unique ID', field: 'id' },\n  //   ],\n  //   data: [\n  //     { name: 'Mehmet', id: 307 },\n  //     { name: 'Zerya ',id:891},\n  //     { name: 'Kumar',id:644},\n  //     { name: 'Kovind19',id:6969}\n  //   ],\n  // });\n  //getApiData();\n  // read_details();\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Registered Patients\",\n    columns: state.columns,\n    data: state.data,\n    options: {\n      paging: false\n    },\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.push(newData);\n            state.push = data;\n            let s = get_data(state.push); //object to be pushed with api\n\n            console.log(JSON.stringify(s)); // do api request to send state.push below\n            // axios.post('',JSON.stringify(s))\n            // .then((response)=> console.log(response))\n            // .catch((err)=>console.log(err))\n\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            console.log(\"oldData: \", oldData);\n            setState(prevState => {\n              const data = [...prevState.data];\n              state.push = state.data; // console.log(state.push)\n              // console.log(\"new data: \",newData)\n\n              state.push[data.length - 1] = newData;\n              let s = get_data2(state.push); //object to be pushed\n              //do api request to send state.push below\n\n              data[data.indexOf(oldData)] = newData;\n              return { ...prevState,\n                data\n              };\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(oldData), 1);\n            console.log(\"data \", data);\n            state.push = data;\n            let s = get_data3(state.push); //object to pushed\n            //do api request\n            // console.log(\"s= \",s)\n\n            return { ...prevState,\n              data\n            };\n          });\n        }, 600);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/Sumanth/OneDrive/Documents/react/patient_monitor/src/components/pattable.js"],"names":["React","useState","useEffect","MaterialTable","PatTableExtract","axios","Extract","PatTable","apiData","setapiData","datalen","setdataLen","getApiData","get","params","a_id","then","res","data","patients","catch","err","console","log","create_object","name","address","patientId","phone","guardianName","doctorId","sex","weight","height","age","email","table_data","Details","key","d","j","name_list","id_list","data_fn","length","id","state","setState","columns","title","field","push","get_data","s","get_data2","get_data3","paging","onRowAdd","newData","Promise","resolve","setTimeout","prevState","JSON","stringify","onRowUpdate","oldData","indexOf","onRowDelete","splice"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { PatTableExtract } from \"./listextractor\";\r\nimport axios from \"axios\";\r\nimport { Extract } from \"./extract.js\";\r\n\r\nexport function PatTable() {\r\n  //set state for apidata\r\n  const [apiData, setapiData] = useState([]);\r\n  const [datalen, setdataLen] = useState(0);\r\n\r\n  //request data from api\r\n  async function getApiData() {\r\n    await axios\r\n      .get(\"http://7f528d0c0908.ngrok.io/covid19_patient_monitor/get_info\", {\r\n        params: {\r\n          a_id: \"ADMIN123\",\r\n        },\r\n      })\r\n      .then((res) => {\r\n        // console.log(\"api response \", res.data.patients);\r\n        setapiData(res.data.patients);\r\n        //console.log(\"state= \", apiData);\r\n      })\r\n      .catch((err) => console.log(\"error \", err));\r\n  }\r\n\r\n  let create_object = () => {\r\n    return {\r\n      name: 0,\r\n      address: 0,\r\n      patientId: 0,\r\n      phone: 0,\r\n      guardianName: 0,\r\n      doctorId: 0,\r\n      sex: 0,\r\n      weight: 0,\r\n      height: 0,\r\n      age: 0,\r\n      email: 0,\r\n    };\r\n  };\r\n\r\n  function table_data() {\r\n    //await getApiData();\r\n    // let len = apiData;\r\n    getApiData();\r\n    let Details = apiData;\r\n    console.log(\"api obj details \", apiData);\r\n    // console.log(\"detaiks name \", apiData[1].name);\r\n    for (var key in Details) console.log(\"details[k]= \", Details[key]);\r\n    let d = [];\r\n    for (let j = 0; j < 7; j++) d[j] = create_object();\r\n    //console.log(\"table data: \", d);\r\n    // console.log(\"d name \", d[0].name);\r\n\r\n    // for (let j = 0; j < 7; j++) {\r\n    //   d[j].name = Details[j].name;\r\n    //   d[j].address = Details[j].address;\r\n    //   d[j].patientId = Details[j].patientId;\r\n    //   d[j].phone = Details[j].phone;\r\n    //   d[j].guardianName = Details[j].guardianName;\r\n    //   d[j].doctorId = Details[j].doctorId;\r\n    //   d[j].sex = Details[j].sex;\r\n    //   d[j].weight = Details[j].weight;\r\n    //   d[j].height = Details[j].height;\r\n    //   d[j].age = Details[j].age;\r\n    // }\r\n\r\n    //console.log(\"table data: \", d);\r\n    return d;\r\n  }\r\n  let d = table_data();\r\n  // console.log(\"table data: \", d);\r\n\r\n  let [name_list, id_list] = PatTableExtract();\r\n\r\n  //try to make a func which would return {name:null,id:null} and make this return happen as many times as there are names in the name list\r\n  let data_fn = (name_list, id_list) => {\r\n    let data = [];\r\n    for (let j = 0; j < name_list.length; j++) data[j] = create_object();\r\n    // data[0].name=n.forEach((p)=>p)\r\n    for (let j = 0; j < name_list.length; j++) {\r\n      data[j].name = name_list[j];\r\n      data[j].id = id_list[j];\r\n    }\r\n    return data;\r\n  };\r\n\r\n  //console.log(\"apidata= \", apiData);\r\n\r\n  let [state, setState] = React.useState({\r\n    columns: [\r\n      { title: \"Name\", field: \"name\" },\r\n      { title: \"Patient ID\", field: \"id\" },\r\n      { title: \"Email\", field: \"email\" },\r\n      { title: \"Password\", field: \"password\" },\r\n      { title: \"Address\", field: \"address\" },\r\n      { title: \"Phone Number\", field: \"phone\" },\r\n      { title: \"Gender\", field: \"sex\" },\r\n      { title: \"Name of Guardian\", field: \"guardianName\" },\r\n      { title: \"Age\", field: \"age\" },\r\n      { title: \"Height\", field: \"height\" },\r\n      { title: \"Weight\", field: \"weight\" },\r\n      { title: \"Doctor ID\", field: \"doctorid\" },\r\n    ],\r\n    // data: data_fn(name_list, id_list),\r\n    data: [],\r\n    push: { name: null, id: null },\r\n  });\r\n\r\n  const get_data = (push) => {\r\n    let s = [];\r\n    //console.log(\"push =\",push)\r\n    for (let j = 0; j < name_list.length + 1; j++) s[j] = create_object();\r\n    for (let j = 0; j < name_list.length + 1; j++) {\r\n      s[j].name = push[j].name;\r\n      s[j].id = push[j].id;\r\n    }\r\n    //console.log(q)\r\n    return s;\r\n  };\r\n  const get_data2 = (push) => {\r\n    let s = [];\r\n    //console.log(\"push =\",push)\r\n    for (let j = 0; j < name_list.length; j++) s[j] = create_object();\r\n    for (let j = 0; j < name_list.length; j++) {\r\n      s[j].name = push[j].name;\r\n      s[j].id = push[j].id;\r\n    }\r\n    //console.log(q)\r\n    return s;\r\n  };\r\n  const get_data3 = (push) => {\r\n    let s = [];\r\n    //console.log(\"push =\",push)\r\n    for (let j = 0; j < name_list.length - 1; j++) s[j] = create_object();\r\n    for (let j = 0; j < name_list.length - 1; j++) {\r\n      s[j].name = push[j].name;\r\n      s[j].id = push[j].id;\r\n    }\r\n    //console.log(q)\r\n    return s;\r\n  };\r\n  // let [state, setState] = React.useState({\r\n  //   columns: [\r\n  //     { title: 'Name', field: 'name' },\r\n  //     { title: 'Unique ID', field: 'id' },\r\n  //   ],\r\n  //   data: [\r\n  //     { name: 'Mehmet', id: 307 },\r\n  //     { name: 'Zerya ',id:891},\r\n  //     { name: 'Kumar',id:644},\r\n  //     { name: 'Kovind19',id:6969}\r\n  //   ],\r\n  // });\r\n  //getApiData();\r\n  // read_details();\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        title=\"Registered Patients\"\r\n        columns={state.columns}\r\n        data={state.data}\r\n        options={{\r\n          paging: false,\r\n        }}\r\n        editable={{\r\n          onRowAdd: (newData) =>\r\n            new Promise((resolve) => {\r\n              setTimeout(() => {\r\n                resolve();\r\n                setState((prevState) => {\r\n                  const data = [...prevState.data];\r\n                  data.push(newData);\r\n                  state.push = data;\r\n                  let s = get_data(state.push); //object to be pushed with api\r\n                  console.log(JSON.stringify(s));\r\n                  // do api request to send state.push below\r\n                  // axios.post('',JSON.stringify(s))\r\n                  // .then((response)=> console.log(response))\r\n                  // .catch((err)=>console.log(err))\r\n                  return { ...prevState, data };\r\n                });\r\n              }, 600);\r\n            }),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve) => {\r\n              setTimeout(() => {\r\n                resolve();\r\n                if (oldData) {\r\n                  console.log(\"oldData: \", oldData);\r\n                  setState((prevState) => {\r\n                    const data = [...prevState.data];\r\n                    state.push = state.data;\r\n                    // console.log(state.push)\r\n                    // console.log(\"new data: \",newData)\r\n                    state.push[data.length - 1] = newData;\r\n                    let s = get_data2(state.push); //object to be pushed\r\n                    //do api request to send state.push below\r\n                    data[data.indexOf(oldData)] = newData;\r\n                    return { ...prevState, data };\r\n                  });\r\n                }\r\n              }, 600);\r\n            }),\r\n          onRowDelete: (oldData) =>\r\n            new Promise((resolve) => {\r\n              setTimeout(() => {\r\n                resolve();\r\n                setState((prevState) => {\r\n                  const data = [...prevState.data];\r\n                  data.splice(data.indexOf(oldData), 1);\r\n                  console.log(\"data \", data);\r\n                  state.push = data;\r\n                  let s = get_data3(state.push); //object to pushed\r\n                  //do api request\r\n                  // console.log(\"s= \",s)\r\n                  return { ...prevState, data };\r\n                });\r\n              }, 600);\r\n            }),\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}