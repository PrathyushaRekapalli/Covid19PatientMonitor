{"ast":null,"code":"import List from'../docpat.json';export function Extract(name){console.log(\"inisde list ectractor method\");var name_list=[],id_list=[],i=0;List.forEach(function(p){if(p.name===name){name_list=p.patients.map(function(e){return e[0];});id_list=p.patients.map(function(e){return e[1];});}});console.log(name_list,id_list);return[name_list,id_list];}export function PatTableExtract(){var name_list=[],id_list=[],i=0;List.forEach(function(p){name_list=p.patients.map(function(e){return e[0];});id_list=p.patients.map(function(e){return e[1];});});console.log(name_list);return[name_list,id_list];}export function doctableExtract(){var name_list=[],id_list=[],i=0;List.forEach(function(p){name_list.push(p.name);console.log(\"added \",name_list);id_list.push(p.d_id);});//console.log(name_list)\nreturn[name_list,id_list];}","map":{"version":3,"sources":["C:/Users/Sumanth/OneDrive/Documents/react/patient_monitor/src/components/listextractor.js"],"names":["List","Extract","name","console","log","name_list","id_list","i","forEach","p","patients","map","e","PatTableExtract","doctableExtract","push","d_id"],"mappings":"AACA,MAAOA,CAAAA,IAAP,KAAiB,gBAAjB,CAEA,MAAO,SAASC,CAAAA,OAAT,CAAiBC,IAAjB,CAAsB,CACzBC,OAAO,CAACC,GAAR,CAAY,8BAAZ,EACA,GAAIC,CAAAA,SAAS,CAAC,EAAd,CAAiBC,OAAO,CAAC,EAAzB,CAA4BC,CAAC,CAAC,CAA9B,CACAP,IAAI,CAACQ,OAAL,CAAa,SAACC,CAAD,CAAK,CACd,GAAGA,CAAC,CAACP,IAAF,GAASA,IAAZ,CAAiB,CACbG,SAAS,CAACI,CAAC,CAACC,QAAF,CAAWC,GAAX,CAAe,SAACC,CAAD,QAAKA,CAAAA,CAAC,CAAC,CAAD,CAAN,EAAf,CAAV,CACAN,OAAO,CAACG,CAAC,CAACC,QAAF,CAAWC,GAAX,CAAe,SAACC,CAAD,QAAKA,CAAAA,CAAC,CAAC,CAAD,CAAN,EAAf,CAAR,CACH,CACJ,CALD,EAMAT,OAAO,CAACC,GAAR,CAAYC,SAAZ,CAAsBC,OAAtB,EACA,MAAO,CAACD,SAAD,CAAWC,OAAX,CAAP,CACH,CAED,MAAO,SAASO,CAAAA,eAAT,EAA0B,CAC7B,GAAIR,CAAAA,SAAS,CAAC,EAAd,CAAiBC,OAAO,CAAC,EAAzB,CAA4BC,CAAC,CAAC,CAA9B,CACAP,IAAI,CAACQ,OAAL,CAAa,SAACC,CAAD,CAAK,CACdJ,SAAS,CAACI,CAAC,CAACC,QAAF,CAAWC,GAAX,CAAe,SAACC,CAAD,QAAKA,CAAAA,CAAC,CAAC,CAAD,CAAN,EAAf,CAAV,CACAN,OAAO,CAACG,CAAC,CAACC,QAAF,CAAWC,GAAX,CAAe,SAACC,CAAD,QAAKA,CAAAA,CAAC,CAAC,CAAD,CAAN,EAAf,CAAR,CACH,CAHD,EAIAT,OAAO,CAACC,GAAR,CAAYC,SAAZ,EACA,MAAO,CAACA,SAAD,CAAWC,OAAX,CAAP,CACH,CAED,MAAO,SAASQ,CAAAA,eAAT,EAA0B,CAC7B,GAAIT,CAAAA,SAAS,CAAC,EAAd,CAAiBC,OAAO,CAAC,EAAzB,CAA4BC,CAAC,CAAC,CAA9B,CACAP,IAAI,CAACQ,OAAL,CAAa,SAACC,CAAD,CAAK,CACdJ,SAAS,CAACU,IAAV,CAAeN,CAAC,CAACP,IAAjB,EACAC,OAAO,CAACC,GAAR,CAAY,QAAZ,CAAqBC,SAArB,EACAC,OAAO,CAACS,IAAR,CAAaN,CAAC,CAACO,IAAf,EACH,CAJD,EAKA;AACA,MAAO,CAACX,SAAD,CAAWC,OAAX,CAAP,CACH","sourcesContent":["\r\nimport List from '../docpat.json'\r\n\r\nexport function Extract(name){\r\n    console.log(\"inisde list ectractor method\")\r\n    let name_list=[],id_list=[],i=0\r\n    List.forEach((p)=>{\r\n        if(p.name===name){\r\n            name_list=p.patients.map((e)=>e[0])\r\n            id_list=p.patients.map((e)=>e[1])\r\n        }\r\n    })\r\n    console.log(name_list,id_list)\r\n    return [name_list,id_list]\r\n}\r\n\r\nexport function PatTableExtract(){\r\n    let name_list=[],id_list=[],i=0\r\n    List.forEach((p)=>{\r\n        name_list=p.patients.map((e)=>e[0])\r\n        id_list=p.patients.map((e)=>e[1])\r\n    })\r\n    console.log(name_list)\r\n    return [name_list,id_list]\r\n}\r\n\r\nexport function doctableExtract(){\r\n    let name_list=[],id_list=[],i=0\r\n    List.forEach((p)=>{\r\n        name_list.push(p.name)\r\n        console.log(\"added \",name_list)\r\n        id_list.push(p.d_id)\r\n    })\r\n    //console.log(name_list)\r\n    return [name_list,id_list]\r\n}\r\n \r\n"]},"metadata":{},"sourceType":"module"}